
//! Autogenerated weights for `pallet_club`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-01-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-0GAUFSD`, CPU: `Intel(R) Core(TM) i3-4030U CPU @ 1.90GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/solochain-template-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet
// pallet_club
// --extrinsic
// *
// --steps=50
// --repeat=20
// --heap-pages=4096
// --output
// ./pallets/pallet_club/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions needed for pallet_club
pub trait WeightInfo {
	fn create_club() -> Weight;
	fn transfer_ownership() -> Weight;
	fn set_annual_fee() -> Weight;
	fn join_club() -> Weight;
}

/// Weight functions for `pallet_club`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ClubModule::NextClubId` (r:1 w:1)
	/// Proof: `ClubModule::NextClubId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `ClubModule::Clubs` (r:0 w:1)
	/// Proof: `ClubModule::Clubs` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	fn create_club() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1493`
		// Minimum execution time: 86_285_000 picoseconds.
		Weight::from_parts(88_098_000, 0)
			.saturating_add(Weight::from_parts(0, 1493))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `ClubModule::Clubs` (r:1 w:1)
	/// Proof: `ClubModule::Clubs` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	fn transfer_ownership() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `104`
		//  Estimated: `3537`
		// Minimum execution time: 47_142_000 picoseconds.
		Weight::from_parts(49_168_000, 0)
			.saturating_add(Weight::from_parts(0, 3537))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ClubModule::Clubs` (r:1 w:1)
	/// Proof: `ClubModule::Clubs` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	fn set_annual_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `104`
		//  Estimated: `3537`
		// Minimum execution time: 47_568_000 picoseconds.
		Weight::from_parts(81_485_000, 0)
			.saturating_add(Weight::from_parts(0, 3537))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `ClubModule::Clubs` (r:1 w:0)
	/// Proof: `ClubModule::Clubs` (`max_values`: None, `max_size`: Some(72), added: 2547, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `ClubModule::Members` (r:1 w:1)
	/// Proof: `ClubModule::Members` (`max_values`: None, `max_size`: Some(80), added: 2555, mode: `MaxEncodedLen`)
	fn join_club() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `249`
		//  Estimated: `3593`
		// Minimum execution time: 184_089_000 picoseconds.
		Weight::from_parts(197_421_000, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
